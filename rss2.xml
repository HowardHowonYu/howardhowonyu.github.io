<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Howard&#39;s nest</title>
    <link>https://howardhowonyu.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 26 Feb 2020 01:32:49 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>확률론적 선형 회귀모형</title>
      <link>https://howardhowonyu.github.io/2020/02/26/TIL-machine-learning-2020-02-26-machine-learning2/</link>
      <guid>https://howardhowonyu.github.io/2020/02/26/TIL-machine-learning-2020-02-26-machine-learning2/</guid>
      <pubDate>Wed, 26 Feb 2020 01:17:59 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;OLS방법을-사용하여-최적의-가중치를-계산할수-있지만-오차범위를-알지-못하면-가중치를-알아도-아무것도-모르는-거랑-같다&quot;&gt;&lt;a href=&quot;#OLS방법을-사용하여-최적의-가중치를-계산할수-있지만-오차범위를-알지-못하면-가중치를-알아도-아무것도-모르는-거랑-같다&quot; class=&quot;headerlink&quot; title=&quot;OLS방법을 사용하여 최적의 가중치를 계산할수 있지만, 오차범위를 알지 못하면 가중치를 알아도 아무것도 모르는 거랑 같다!&quot;&gt;&lt;/a&gt;OLS방법을 사용하여 최적의 가중치를 계산할수 있지만, 오차범위를 알지 못하면 가중치를 알아도 아무것도 모르는 거랑 같다!&lt;/h4&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h4 id="OLS방법을-사용하여-최적의-가중치를-계산할수-있지만-오차범위를-알지-못하면-가중치를-알아도-아무것도-모르는-거랑-같다"><a href="#OLS방법을-사용하여-최적의-가중치를-계산할수-있지만-오차범위를-알지-못하면-가중치를-알아도-아무것도-모르는-거랑-같다" class="headerlink" title="OLS방법을 사용하여 최적의 가중치를 계산할수 있지만, 오차범위를 알지 못하면 가중치를 알아도 아무것도 모르는 거랑 같다!"></a>OLS방법을 사용하여 최적의 가중치를 계산할수 있지만, 오차범위를 알지 못하면 가중치를 알아도 아무것도 모르는 거랑 같다!</h4><a id="more"></a><ul><li>가중치의 오차 범위 혹은 신뢰 구간을 계산할 수 없다면 OLS 결과로부터 실질적인 결론을 이끌어내기 어렵다.</li></ul><h2 id="부트스트래핑"><a href="#부트스트래핑" class="headerlink" title="부트스트래핑"></a>부트스트래핑</h2><ul><li>OLS로 구한 가중치의 추정값은 표본 데이터에 따라 달라진다.</li><li>여러 다른 표본 데이터 집합이 있다면 넣어보면서 가중치가 어떻게 달라지는지 알아 볼수 있지만, 현실적으로 다시 데이터를 얻기는 힘듦</li><li>따라서 기존 데이터를 재표본화하여(re-sampling)하여 여러가지 다양한 표본 데이터를 만드는 방법을 부트스트래핑이라 한다.</li></ul><h2 id="확률론적-선형-회귀모형"><a href="#확률론적-선형-회귀모형" class="headerlink" title="확률론적 선형 회귀모형"></a>확률론적 선형 회귀모형</h2><p><strong>확률론적 선형회귀모형을 쓰면 빠르고 안정적으로 가중치 추정값의 오차를 구할수 있다.</strong></p><ul><li>확률론적 선형 회귀모형에서는 데이터가 확률 변수로 부터 생성된 표본이라고 가정한다.</li></ul><p><strong>1. 선형 정규 분포 가정</strong></p><ul><li>종속변수 $y$가 독립변수$x$의 선형조합으로 결정되는 “기대값”과 고정된 분산$\sigma^2$를 가지는 “정규 분포”라는 것이다.</li></ul><script type="math/tex; mode=display">y \sim N(w^Tx,\sigma^2)</script><script type="math/tex; mode=display">\epsilon = y - w^Tx</script><script type="math/tex; mode=display">p(\epsilon|\theta) = N(0,\sigma^2)</script><p><strong>2. 외생성 가정</strong></p><ul><li>잡음 $\epsilon$의 기대값은 독립변수 $x$의 크기에 상관없이 항상 0이라고 가정.</li></ul><script type="math/tex; mode=display">E[\epsilon|x] = 0</script><p><strong>3. 조건부 독립 가정</strong></p><ul><li>$i$번쨰 표본의 잡음 $\epsilon_i$와 $j$번쨰 표본의 잡음 $\epsilon_j$의 공분산 값이 $x$와 상관없이 항상 0이라고 가정한다.</li></ul><script type="math/tex; mode=display">Cov[\epsilon_i,\epsilon_j]=0 (i,j = 1,2,...,N)</script><ul><li>이는 서로 독립이라는 가정과 같다.</li></ul><script type="math/tex; mode=display">E[\epsilon_i\epsilon_j]=0(i,j = 1,2,...,N)</script><ul><li>잡음 벡터 $\epsilon$의 공분산 행렬이 대각행렬이 되어야 한다.(비대각 성분 모두 0)</li></ul><script type="math/tex; mode=display">Cov[\epsilon] = E[\epsilon\epsilon^T] = Diagonal matrix</script><p><strong>4. 등분산성 가정</strong></p><ul><li><p>$i$번쨰 표본의 잡음 $\epsilon_i$와 $j$번쨰 표본의 잡음 $\epsilon_j$의 분산 값이 표본과 상관없이 항상 같다고 가정</p><script type="math/tex; mode=display">Cov[\epsilon]=E[\epsilon\epsilon^T]=\sigma^2I</script></li><li><p>잡음 벡터 \epsilon의 공분산 행렬이 항등행렬 형태가 되어야 한다는 조건과 같다.</p></li></ul><h2 id="최대-가능도-방법을-사용한-선형-회귀분석"><a href="#최대-가능도-방법을-사용한-선형-회귀분석" class="headerlink" title="최대 가능도 방법을 사용한 선형 회귀분석"></a>최대 가능도 방법을 사용한 선형 회귀분석</h2><ul><li>최대 가능도 방법(Maximum Likelihood Estimation)을 사용하여 가중치 벡터  𝑤 의 값을 구해보면, OLS의 직교 방정식과 같은 직교 방정식을 얻을 수 있다</li></ul><h2 id="잔차의-분포"><a href="#잔차의-분포" class="headerlink" title="잔차의 분포"></a>잔차의 분포</h2><p>$ e = M\epsilon$</p><ul><li>M : 잔차행렬</li><li>잔차 $e$는 잡음 $\epsilon$의 선형변환이다.</li><li>정규분포의 선형변환은 마찬가지로 정규분포 이므로 잔차는 정규분포를 따른다.</li></ul><h2 id="회귀계수의-표준오차"><a href="#회귀계수의-표준오차" class="headerlink" title="회귀계수의 표준오차"></a>회귀계수의 표준오차</h2><ul><li>실제 가중치 계수 $w_i$와 우리가 추정한 가중치 계수 $\hat{w}_i$의 차이를 표준오차로 나눈값, 즉 <strong>정규화된 모수 오차는 자유도가 $N-K$인 표준 스튜던트 t분포를 따른다.</strong></li></ul><h2 id="단일-계수-t-검정"><a href="#단일-계수-t-검정" class="headerlink" title="단일 계수 t-검정"></a>단일 계수 t-검정</h2><ul><li>정규화된 모수 오차를 검정통계량으로 사용하면 $w_i$가 0인지 아닌지에 대한 검정을 실시할수 있다.</li><li>StatsModels summary 메서드가 출력하는 회귀분석 보고서에서 <code>std err</code>로 표시된 열이 모형계수의 표준오차, <code>t</code>로 표시된 열이 단일 계수 t-검정의 검정 통계량, 그리고 <code>P&gt;|t|</code>로 표시된 열이 유의확률을 뜻한다.</li><li><strong>두 독립변수의 계수값을 비교할때도 사용</strong></li><li><strong>범주형 독립변수의 범주값이 가지는 유의성을 판단하는데 유용하다.</strong></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/26/TIL-machine-learning-2020-02-26-machine-learning2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>부분회귀</title>
      <link>https://howardhowonyu.github.io/2020/02/26/TIL-machine-learning-2020-02-26-machine-learning/</link>
      <guid>https://howardhowonyu.github.io/2020/02/26/TIL-machine-learning-2020-02-26-machine-learning/</guid>
      <pubDate>Wed, 26 Feb 2020 01:03:53 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;부분회귀&quot;&gt;&lt;a href=&quot;#부분회귀&quot; class=&quot;headerlink&quot; title=&quot;부분회귀&quot;&gt;&lt;/a&gt;부분회귀&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;회귀분석을 한 후 새로운 독립변수를 추가하여 다시 회귀분석 한다면?
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="부분회귀"><a href="#부분회귀" class="headerlink" title="부분회귀"></a>부분회귀</h1><ul><li>회귀분석을 한 후 새로운 독립변수를 추가하여 다시 회귀분석 한다면?<a id="more"></a><ul><li>처음에 나온 w1의 값과 두번째 나온 w’1의 값은 다르다.</li><li>종속변수에 영향을 미치는 모든 독립변수들이 회귀모형에 포함되지 않는한, 모형의 가중치는 항상 편향된(biased)값 이다.</li></ul></li></ul><blockquote><p><strong>새로운 독립변수 그룹을 추가해서 다시 회귀분석을 하면, 기존 가중치 벡터의 값이 달라진다.</strong></p></blockquote><h3 id="두가지-회귀분석-결과가-같을수-있는-경우"><a href="#두가지-회귀분석-결과가-같을수-있는-경우" class="headerlink" title="두가지 회귀분석 결과가 같을수 있는 경우"></a>두가지 회귀분석 결과가 같을수 있는 경우</h3><ul><li>$w’2 = 0$, 즉 $X_2$와 $y$의 상관관계가 없는 경우</li><li>$X_1^TX_2 = 0$, 즉 독립변수 $X_1$과 독립변수 $X_2$가 직교하는 경우. 서로 상관관계가 없으면 직교할 가능성이 높다.</li></ul><h2 id="프리슈-워-로벨-정리"><a href="#프리슈-워-로벨-정리" class="headerlink" title="프리슈-워-로벨 정리"></a>프리슈-워-로벨 정리</h2><ul><li>1 : 특정한 독립변수 그룸 $X_1$로 종속변수 $y$를 선형회귀분석하여 잔차 $y^*$를 구한다.</li><li>2 : $X_1$로 다른 독립변수 $x_2$를 선형 회귀분석하여 나온 잔차 $x^*_2$를 구한다.</li><li>3 : $y^<em>$를 종속변수로 하고 $x^</em>_2$ 를 독립변수로 하여 선형회귀분석하여 구한 가중치는 $X_1$과 $x_2$를 모두 사용하여 $y$를 선형 회귀분석하였을때 $x_2$에 대한 가중치와 같다.</li></ul><h2 id="부분회귀-플롯-Partial-Regression-Plot-Added-Variable-Plot"><a href="#부분회귀-플롯-Partial-Regression-Plot-Added-Variable-Plot" class="headerlink" title="부분회귀 플롯(Partial Regression Plot, Added Variable Plot)"></a>부분회귀 플롯(Partial Regression Plot, Added Variable Plot)</h2><ul><li>특정한 하나의 독립변수의 영향력을 시각화하는 방법</li></ul><blockquote><p><strong>순서</strong></p></blockquote><ol><li>특정한 독립변수  $𝑥_2$ 를 제외한 나머지 독립변수  $𝑋_1$ 들로 종속변수  $𝑦$ 를 선형 회귀분석하여 잔차  $𝑦^∗$ 를 구한다.</li><li>특정한 독립변수  $𝑥_2$ 를 제외한 나머지 독립변수  $𝑋_1$ 들로 특정한 독립변수  $𝑥_2$ 를 선형 회귀분석하여 잔차  $x_2^*$ 를 구한다.</li><li>잔차  $𝑥_2^<em>$ 를 독립변수로, 잔차  $𝑦^∗$ 를 종속변수로 하여 선형 회귀분석한다. 이렇게 구한  $𝑥_2^</em>$ ,  $𝑦^∗$ 의 스캐터 플롯과 회귀분석 결과를 나타낸 것이 부분회귀 플롯이다.</li></ol><ul><li>부분회귀 플롯에서 가로축의 값은 독립변수 자체의 값이 아닌, 다른 독립변수의 영향을 제거한 일종의 “순수한 독립변수 성분”</li></ul><h2 id="CCPR-플롯"><a href="#CCPR-플롯" class="headerlink" title="CCPR 플롯"></a>CCPR 플롯</h2><ul><li>부분회귀플롯과 마찬가지, “가로축의 값은 독립변수 그대로의 값”</li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/26/TIL-machine-learning-2020-02-26-machine-learning/#disqus_thread</comments>
    </item>
    
    <item>
      <title>범주형 독립변수</title>
      <link>https://howardhowonyu.github.io/2020/02/25/TIL-machine-learning-2020-02-25-machinelearning2/</link>
      <guid>https://howardhowonyu.github.io/2020/02/25/TIL-machine-learning-2020-02-25-machinelearning2/</guid>
      <pubDate>Tue, 25 Feb 2020 13:36:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;범주형-변수가-하나인-경우&quot;&gt;&lt;a href=&quot;#범주형-변수가-하나인-경우&quot; class=&quot;headerlink&quot; title=&quot;범주형 변수가 하나인 경우&quot;&gt;&lt;/a&gt;범주형 변수가 하나인 경우&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;더미변수 방법은 변주형 변수를 두개의 변수로 바꾸는 것
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="범주형-변수가-하나인-경우"><a href="#범주형-변수가-하나인-경우" class="headerlink" title="범주형 변수가 하나인 경우"></a>범주형 변수가 하나인 경우</h2><ul><li>더미변수 방법은 변주형 변수를 두개의 변수로 바꾸는 것<a id="more"></a><h3 id="풀랭크-방식과-축소랭크-방식"><a href="#풀랭크-방식과-축소랭크-방식" class="headerlink" title="풀랭크 방식과 축소랭크 방식"></a>풀랭크 방식과 축소랭크 방식</h3></li><li>풀랭크 : 더미변수의 값을 원핫인코딩 방식으로 지정.</li><li>축소랭크 : 특정한 하나의 범주값을 기준값으로 하고 기준값에 대응하는 더미변수의 가중치는 항상 1로 놓는다.</li></ul><blockquote><p>월별기온예측</p><pre><code>- 풀랭크 방식: 각 월의 대표값- 축소랭크 방식: 기준값(1월의 평균기온)에서 &quot;차이&quot;가 얼마나 나는가</code></pre></blockquote><h2 id="두개-이상의-범주형-변수가-있는-경우"><a href="#두개-이상의-범주형-변수가-있는-경우" class="headerlink" title="두개 이상의 범주형 변수가 있는 경우"></a>두개 이상의 범주형 변수가 있는 경우</h2><ul><li>두개 이상의 범주형 변수가 있는 경우 축소형 방식을 사용</li><li>모든 범주형 변수의 가중치는 기준값 상수항에 더해지는 상수항으로 취급.</li></ul><h2 id="범주형-독립변수와-실수-독립변수의-상호작용"><a href="#범주형-독립변수와-실수-독립변수의-상호작용" class="headerlink" title="범주형 독립변수와 실수 독립변수의 상호작용"></a>범주형 독립변수와 실수 독립변수의 상호작용</h2><p>Case1)</p><ul><li><p>범주형 독립변수 $x_1$과 실수 독립변수 $x_2$를 가지는 회귀모형에서 연속값 독립변수 $x_2$가 미치는 영향, 즉 가중치가 범주형 독립변수 $x_1$에 따라 달라진다면</p></li><li><p>범주형 독립변수를 더미변수 $d_1$으로 인코딩하고 연속값 독립변수  $x_2$는 $d_1$과의 상호작용항 <code>d_1:x_2</code>를 추가한다.</p></li><li>$x_1$범주값에 따라 $x_2$의 기울기가 달라지는 모형이 된다.</li></ul><p>Case2)</p><ul><li><p>범주형 독립변수도 종속변수에 영향을 미치고, 범주형 독립변수와 실수 독립변수의 “상호작용”도 종속변수에 영향을 미치면</p></li><li><p>$x_1$의 범주값에 따라 상수항과 $x_2$의 기울기가 모두 달라지는 모형이 된다.</p></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/25/TIL-machine-learning-2020-02-25-machinelearning2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>스케일링</title>
      <link>https://howardhowonyu.github.io/2020/02/25/TIL-machine-learning-2020-02-25-machine-learning/</link>
      <guid>https://howardhowonyu.github.io/2020/02/25/TIL-machine-learning-2020-02-25-machine-learning/</guid>
      <pubDate>Tue, 25 Feb 2020 13:32:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;조건수&quot;&gt;&lt;a href=&quot;#조건수&quot; class=&quot;headerlink&quot; title=&quot;조건수&quot;&gt;&lt;/a&gt;조건수&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;가장큰 고유값와 가장 작은 고유값의 비율&lt;/li&gt;
&lt;li&gt;&lt;p&gt;조건수가 크면 민감도가 커진다. 즉, 오차가 생기면 해에 미치는 영향이 커진다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="조건수"><a href="#조건수" class="headerlink" title="조건수"></a>조건수</h2><ul><li>가장큰 고유값와 가장 작은 고유값의 비율</li><li><p>조건수가 크면 민감도가 커진다. 즉, 오차가 생기면 해에 미치는 영향이 커진다.</p><a id="more"></a></li><li><p>연립방정식을 이루는 행렬의 조건수가 커지면 상수항 오차가 작은 경우라도 연립방정식 해의 오차는 커진다.</p><blockquote><p><strong>결론 : 공분산 행렬의 조건수가 크면 회귀분석을 사용한 예측값도 오차가 커진다.</strong></p></blockquote></li></ul><h4 id="조건수가-커지는-경우"><a href="#조건수가-커지는-경우" class="headerlink" title="조건수가 커지는 경우"></a>조건수가 커지는 경우</h4><ul><li>스케일이 크게 다른 경우 -&gt; 스케일링으로 해결</li><li><p>다중공선성, 상관관계가 큰 독립변수들이 있는 경우 -&gt; 변수선택(변수를 버리거나), PCA를 이용한 차원 축소로 해결</p></li><li><p>스케일링이 안된경우 독립변수의 분포 모양이 옆이나 위로 퍼져있다. 이를 원에 가깝게 모을수록 조건수가 작아진다.</p></li><li><p>다중공선성이 있을경우 그래프가 상관관계를 보인다. </p></li><li><p><code>scale()</code>명령 formula안에서 사용하여 스케일링을 할수 있다.</p></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/25/TIL-machine-learning-2020-02-25-machine-learning/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 전처리 기초 2</title>
      <link>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning/</link>
      <guid>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning/</guid>
      <pubDate>Mon, 24 Feb 2020 11:15:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;sklearn-preprocessing-패키지&quot;&gt;&lt;a href=&quot;#sklearn-preprocessing-패키지&quot; class=&quot;headerlink&quot; title=&quot;sklearn.preprocessing 패키지&quot;&gt;&lt;/a&gt;sklearn.preprocessing 패키지&lt;/h2&gt;&lt;p&gt;스케일링 및 변수변환을 위한 &lt;code&gt;StandardScaler&lt;/code&gt; 클래스에서&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="sklearn-preprocessing-패키지"><a href="#sklearn-preprocessing-패키지" class="headerlink" title="sklearn.preprocessing 패키지"></a>sklearn.preprocessing 패키지</h2><p>스케일링 및 변수변환을 위한 <code>StandardScaler</code> 클래스에서<br><a id="more"></a></p><ul><li><code>fit()</code>: 학습용 데이터를 입력으로 실행하면 평균값과 표준편차를 계산하여 객체내에 저장</li><li><code>transform()</code>: 저장했던 평균값을 빼서 새로운 평균값이 0이 되도록 만들고, 저장한 표준편차로 나누어 새로운 표준편차가 1이 되도록 데이터를 변환하여 출력</li><li><code>fit_transform()</code>: 1,2단계를 합친것</li></ul><p>데이터에 아웃라이어가 있을 경우 <code>RobustScaler</code> 클래스를 사용</p><ul><li>중앙값이 0, IQR(interquartile range)이 1이 되도록 변환하여, 아웃라이어가 섞여 있어도 데이터는 0주위에 남게 된다.</li></ul><p><code>FunctionTransformer</code>클래스와 <code>PolynomialFeatures</code>클래스</p><ul><li><code>PolynomialFeatures</code>클래스는 입력데이터를 여러개의 다항식으로 변환<ul><li>degree: 차수</li><li>include_bias: 상수항 생성 여부</li></ul></li><li><code>FunctionTransformer</code>클래스는 사용자가 지정한 함수를 사용하여 입력값을 변환<ul><li>각도 0도와 360도를 구분하기위한 sin,cos함수 사용 예제</li></ul></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning/#disqus_thread</comments>
    </item>
    
    <item>
      <title>선형회귀분석의 기초</title>
      <link>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning3/</link>
      <guid>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning3/</guid>
      <pubDate>Mon, 24 Feb 2020 11:15:23 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;회귀분석&quot;&gt;&lt;a href=&quot;#회귀분석&quot; class=&quot;headerlink&quot; title=&quot;회귀분석&quot;&gt;&lt;/a&gt;회귀분석&lt;/h1&gt;&lt;p&gt;독립변수에 대응하는 종속변수와 가장 비슷한값 y^을 출력하는 함수를 찾는 과정&lt;br&gt;만약 함수 f(x)가 선형함수면, 이 함수를 선형회귀모형(linear regression model)이라 한다.&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="회귀분석"><a href="#회귀분석" class="headerlink" title="회귀분석"></a>회귀분석</h1><p>독립변수에 대응하는 종속변수와 가장 비슷한값 y^을 출력하는 함수를 찾는 과정<br>만약 함수 f(x)가 선형함수면, 이 함수를 선형회귀모형(linear regression model)이라 한다.<br><a id="more"></a></p><ul><li>만약 $f(x)$가 선형함수면 이 함수를 선형회귀모형이라고 한다. 선형회귀모형을 사용하는 회귀분석은 선형회귀분석이라고 한다.<script type="math/tex; mode=display">\hat{y} = w_0 + w_1x_1 + w_2x_2 + ... + w_Dx_D = w_0+w^Tx</script></li></ul><h2 id="상수항-결합"><a href="#상수항-결합" class="headerlink" title="상수항 결합"></a>상수항 결합</h2><p>회귀분석모형 수식을 간단하게 만들기 위해 상수항을 독립변수 데이터 제일 처음에 추가하는것을 상수항 결합 작업이라 한다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">X0 = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">X = sm.add_constant(X0)</span><br></pre></td></tr></table></figure></p><h2 id="최소자승법"><a href="#최소자승법" class="headerlink" title="최소자승법"></a>최소자승법</h2><p>최소자승법(OLS)은 잔차제곱합(RSS)을 최소화 하는 가중치 벡터를 구하는 방법.<br>잔차의 크기(RSS)를 가장 작게 하는 가중치 벡터를 구하기 위해서, 잔차제곱합 식을 미분하여 그레디언트 벡터를 구하고, 이 그레디언트벡터가 영벡터 일때 RSS는 최소가 된다.</p><h2 id="직교방정식"><a href="#직교방정식" class="headerlink" title="직교방정식"></a>직교방정식</h2><p>여기서 그레디언트 벡터가 0벡터가 되는 관계를 나타내는 식을 직교방정식(normal equation)이라 한다.</p><ol><li>모형에 상수항이 있는 경우 잔차벡터의 원소의 합은 0이다. 즉 잔차의 평균은 0이다</li><li>x데이터의 평균값에 대한 예측값은 y데이터의 평균값이다.</li></ol>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>범주형 데이터 처리</title>
      <link>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning2/</link>
      <guid>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning2/</guid>
      <pubDate>Mon, 24 Feb 2020 11:13:02 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;범주형-데이터&quot;&gt;&lt;a href=&quot;#범주형-데이터&quot; class=&quot;headerlink&quot; title=&quot;범주형 데이터&quot;&gt;&lt;/a&gt;범주형 데이터&lt;/h1&gt;&lt;p&gt;혈액형, 성별과 같이 종류를 표시하는 데이터&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="범주형-데이터"><a href="#범주형-데이터" class="headerlink" title="범주형 데이터"></a>범주형 데이터</h1><p>혈액형, 성별과 같이 종류를 표시하는 데이터<br><a id="more"></a></p><h2 id="범주형-데이터의-변형"><a href="#범주형-데이터의-변형" class="headerlink" title="범주형 데이터의 변형"></a>범주형 데이터의 변형</h2><ul><li>더미변수화</li><li>카테고리 임베딩</li></ul><h2 id="더미변수화"><a href="#더미변수화" class="headerlink" title="더미변수화"></a>더미변수화</h2><p>0 또는 1만 가지는 값으로 어떤 특징의 존재 여부를 표시.<br>이진지시자(Boolean indicator),이진변수(binary variable),지시변수(indicator variable),설계변수(design variable),처치(treatment)등으로 불린다.</p><h2 id="patsy를-활용한-더미변수화"><a href="#patsy를-활용한-더미변수화" class="headerlink" title="patsy를 활용한 더미변수화"></a>patsy를 활용한 더미변수화</h2><ul><li>풀랭크 방식<br>  patsy패키지의 <code>dmatrix()</code>함수는 범주값을 더미변수로 바꿔준다.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> patsy <span class="keyword">import</span> dmatrix</span><br><span class="line">df = pd.DataFrame([<span class="string">"A"</span>, <span class="string">"B"</span>], columns=[<span class="string">"x"</span>])</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">dmatrix(<span class="string">"x + 0"</span>, df1)</span><br></pre></td></tr></table></figure></li><li>축소랭크 방식<br>  특정한 하나의 범주값을 기준값으로 하고 기준값에 대응하는 더미변수의 가중치는 항상 1로 한다.<br>  더미변수화 할떄 <code>dmatrix()</code>함수의 문자열에 +0을 생략함</li></ul><h2 id="두개의-범주형-변수"><a href="#두개의-범주형-변수" class="headerlink" title="두개의 범주형 변수"></a>두개의 범주형 변수</h2><ul><li>통합 축소형 방식</li><li>상호작용 방식</li></ul><h2 id="카테고리-임베딩"><a href="#카테고리-임베딩" class="headerlink" title="카테고리 임베딩"></a>카테고리 임베딩</h2><p>범주값 대신 범주값의 특성을 나타내는 연속값 혹은 연속값 벡터를 사용<br>예를들어 운동선수의 이름을 나타내는 범주값의 경우, 운동선수의 나이, 연봉, 신체능력치 등을 사용하고, 지역명을 나타내느 범주값은 지역의 면적, 인구수 등을 사용한다.</p>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/24/TIL-machine-learning-2020-02-24-machine-learning2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSS-selector</title>
      <link>https://howardhowonyu.github.io/2020/02/22/TIL-crawling-2020-02-22-crawling-css/</link>
      <guid>https://howardhowonyu.github.io/2020/02/22/TIL-crawling-2020-02-22-crawling-css/</guid>
      <pubDate>Sat, 22 Feb 2020 12:16:02 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;CSS-Selector&quot;&gt;&lt;a href=&quot;#CSS-Selector&quot; class=&quot;headerlink&quot; title=&quot;CSS Selector&quot;&gt;&lt;/a&gt;CSS Selector&lt;/h1&gt;&lt;p&gt;HTML 엘리먼트에 CSS 스타일을 적용시킬때 엘리먼트를 선택하기 위한 입니다.&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="CSS-Selector"><a href="#CSS-Selector" class="headerlink" title="CSS Selector"></a>CSS Selector</h1><p>HTML 엘리먼트에 CSS 스타일을 적용시킬때 엘리먼트를 선택하기 위한 입니다.<br><a id="more"></a></p><h4 id="1-태그-이름으로-선택"><a href="#1-태그-이름으로-선택" class="headerlink" title="1. 태그 이름으로 선택"></a>1. 태그 이름으로 선택</h4><p>“data 1 엘리먼트를 선택”</p><ul><li>css-selector : <code>div</code></li></ul><h4 id="2-아이디-값으로-선택"><a href="#2-아이디-값으로-선택" class="headerlink" title="2. 아이디 값으로 선택"></a>2. 아이디 값으로 선택</h4><p>“data 2를 아이디 값으로 선택”</p><ul><li>css-selector : <code>#text</code></li></ul><h4 id="3-클래스-값으로-선택"><a href="#3-클래스-값으로-선택" class="headerlink" title="3.클래스 값으로 선택"></a>3.클래스 값으로 선택</h4><p>“data 3를 클래스 값으로 선택”</p><ul><li>css-selector : <code>.no1</code></li><li><code>.dss-txt</code> : data2, data 3가 선택 </li></ul><h4 id="4-속성값으로-선택"><a href="#4-속성값으로-선택" class="headerlink" title="4. 속성값으로 선택"></a>4. 속성값으로 선택</h4><p>“data 4를 속성값으로 선택”</p><ul><li>css-selector : <code>[val=&quot;d4&quot;]</code>, <code>[id=&quot;da4&quot;]</code></li></ul><h4 id="5-혼합해서-사용"><a href="#5-혼합해서-사용" class="headerlink" title="5. 혼합해서 사용"></a>5. 혼합해서 사용</h4><p>“span 태그, class 값이 no5인 엘리먼트 선택”</p><ul><li>css-selector : <code>span.no5</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span>data 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"dss-txt no1"</span>&gt;</span>data 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dss-txt no2"</span> <span class="attr">val</span>=<span class="string">"d3"</span>&gt;</span>data 3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"da4"</span> <span class="attr">val</span>=<span class="string">"d4"</span>&gt;</span>data 4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"no5"</span> &gt;</span>data 5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-not-selector"><a href="#6-not-selector" class="headerlink" title="6. not selector"></a>6. not selector</h4><p>선택된 엘리먼트에서 특정 조건의 엘리먼트를 제거해서 선택<br>data 2 엘리먼트만 제외한 ds 클래스를 선택</p><ul><li>css-selector : <code>.ds:not(.dss2)</code></li></ul><h4 id="7-nth-child"><a href="#7-nth-child" class="headerlink" title="7.nth-child"></a>7.nth-child</h4><p>n번째의 엘리먼트를 선택</p><p>data 3 선택하는 방법</p><ul><li>css-selector : <code>.ds:nth-child(3)</code><br>뒤의 조건(.ds라는 클래스를 가진 상위 클래스의 자식중에 3번째)이 먼저, 다음 ds라는 클래스를 가진거를 선택</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>data 0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss1"</span>&gt;</span>data 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss2"</span>&gt;</span>data 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span> # 얘도 3번째 ds</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss3"</span>&gt;</span>data 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss4"</span>&gt;</span>data 4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss1"</span>&gt;</span>data 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss2"</span>&gt;</span>data 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss3"</span>&gt;</span>data 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span> # 얘도 3번째 ds</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ds dss4"</span>&gt;</span>data 4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds"</span>&gt;</span> data5<span class="tag">&lt;/<span class="name">div</span>&gt;</span> # 얘도 3번째 ds</span><br></pre></td></tr></table></figure><h4 id="8-계층구조로-엘리먼트-선택"><a href="#8-계층구조로-엘리먼트-선택" class="headerlink" title="8. 계층구조로 엘리먼트 선택"></a>8. 계층구조로 엘리먼트 선택</h4><p>바로 아래 단계의 엘리먼트 선택</p><ul><li><code>.wrap-1 &gt; h5</code> : inner 1선택<br>모든 하위 엘리먼트를 선택</li><li><code>.wrap-1 h5</code> : inner 1,inner 2선택<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>inner 1 <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>inner 2 <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/22/TIL-crawling-2020-02-22-crawling-css/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTML</title>
      <link>https://howardhowonyu.github.io/2020/02/22/TIL-crawling-2020-02-22-html-css-selector/</link>
      <guid>https://howardhowonyu.github.io/2020/02/22/TIL-crawling-2020-02-22-html-css-selector/</guid>
      <pubDate>Sat, 22 Feb 2020 10:38:19 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Hyper Text Markup Language&lt;/li&gt;
&lt;li&gt;웹 문서를 작성하는 마크업 언어입니다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul><li>Hyper Text Markup Language</li><li>웹 문서를 작성하는 마크업 언어입니다.</li></ul><a id="more"></a><ul><li>웹페이지를 구성하는 언어에는 3종류가 있습니다.<ul><li>HTML : 화면의 레이아웃이나 텍스트</li><li>CSS : 화면의 색상 크기 등의 스타일</li><li>Javascript : 화면의 클릭, 드래그 등등의 이벤트</li></ul></li></ul><h2 id="1-1-HTML의-구성요소"><a href="#1-1-HTML의-구성요소" class="headerlink" title="1.1 HTML의 구성요소"></a>1.1 HTML의 구성요소</h2><p><strong><code>Document</code></strong></p><ul><li>페이지 전체<br><strong><code>element</code></strong></li><li>계층적 구조로 이루어져 있으며 모여서 Document가 됩니다.</li><li>시작 태그와 끝 태그로 구성되어 있습니다. <code>&lt;div&gt; &lt;/div&gt;</code><br><strong><code>Tag</code></strong></li><li>시작태그와 끝 태그로 엘리먼트를 구성합니다.</li><li>시작 태그에는 여러가지 속성값들이 들어 있습니다.</li><li>태그와 태그 사이에는 문자열 데이터를 가질수 있습니다.</li><li>태그의 이름에 따라서 태그의 목적이 달라집니다.<br><strong><code>Attribute</code></strong></li><li>시작 태그 안에 포함되는 속성값입니다.</li><li><code>id</code>, <code>class</code> : 엘리먼트를 선택하기 위한 목적으로 만들어진 속성값입니다.</li><li>이 외에도 다양한 속성값이 존재 합니다.</li></ul><h3 id="1-2-속성값"><a href="#1-2-속성값" class="headerlink" title="1.2 속성값"></a>1.2 속성값</h3><p><strong><code>id</code></strong> : 웹페이지에서 유일한 값입니다.<br><strong><code>class</code></strong> :</p><ul><li>웹 페이지 내에서 여러개의 class가 존재합니다.</li><li>하나의 엘리먼트에 여러개의 class를 부여할수 있습니다.<br><strong><code>type</code></strong> : 엘리먼트 형태를 결정합니다. (button, checkbox 등)<br><strong><code>style</code></strong> : CSS 스타일 값을 적용할수 있습니다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-1"</span> <span class="attr">class</span>=<span class="string">"bt no1"</span><span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">style</span>=<span class="string">"color:red;"</span> &gt;</span>HTML 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-2"</span> <span class="attr">class</span>=<span class="string">"bt no2"</span><span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>HTML 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-태그의-종류"><a href="#1-3-태그의-종류" class="headerlink" title="1.3 태그의 종류"></a>1.3 태그의 종류</h3><p><strong><code>Head</code></strong> : 제목을 나타낼때 사용합니다. h1부터 숫자가 커질수록 작아집니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong><code>p</code></strong> : 한줄의 문자열을 출력하기 위한 태그입니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>파이썬은 재미있습니다.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>내일은 휴강입니다.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong><code>div</code></strong> : 레이아웃을 나타내는 태그이고, 가장 많이 사용됩니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>html 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>html 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>html 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong><code>table</code></strong> : row와 column이 있는 테이블 모양을 나타낼때 사용되는 태그입니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>테이블 제목<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>코드<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>회사명<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>0001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>애플<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span>&gt;</span>0002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>네이버<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong><code>ul</code></strong>,<strong><code>li</code></strong> : 리스트를 나타내는 태그입니다. 하나의 ul에 다수의 li태그를 가집니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>data 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>data 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>data 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong><code>a</code></strong> : 링크를 출력하는 태그입니다. <code>href</code> 속성값에 이동할 URL을 입력합니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"howardhowonyu.github.io"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Howard's nest<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong><code>img</code></strong> : 이미지를 불러오는 태그 입니다. <code>src</code> 속성값에 이미지의 URL을 입력합니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span> =<span class="string">"width:200px;"</span><span class="attr">src</span>=<span class="string">"이곳에 이미지의 URL을 입력합니다."</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong><code>iframe</code></strong> : 외부 URL 링크의 페이지를 보여주기 위한 태그입니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://howardhowonyu.github.io/"</span> <span class="attr">width</span>=<span class="string">"100%;"</span> <span class="attr">height</span>=<span class="string">"400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong><code>input</code></strong> : 여러 형태의 값을 입력받는 요소들을 만드는 태그입니다.</p><ul><li>text : 문자를 입력받습니다.</li><li>password : 비밀번호(<em>**</em>)형태로 입력 받습니다.</li><li>radio : n지 선다의 답을 받습니다.</li><li>checkbox : 체크박스를 만듭니다.<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"비밀번호"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"data"</span>&gt;</span>radio 1<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"data"</span>&gt;</span>radio 2<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>checkbox 1<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><code>select,option</code></strong>:  옵션을 선택할수 있는 드랍다운 형태를 만드는  태그입니다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>data 1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>data 2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/22/TIL-crawling-2020-02-22-html-css-selector/#disqus_thread</comments>
    </item>
    
    <item>
      <title>예외처리</title>
      <link>https://howardhowonyu.github.io/2020/02/21/python-2020-02-21-try-except-finally-raise/</link>
      <guid>https://howardhowonyu.github.io/2020/02/21/python-2020-02-21-try-except-finally-raise/</guid>
      <pubDate>Fri, 21 Feb 2020 10:30:49 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;TRY-EXCEPT&quot;&gt;&lt;a href=&quot;#TRY-EXCEPT&quot; class=&quot;headerlink&quot; title=&quot;TRY, EXCEPT&quot;&gt;&lt;/a&gt;TRY, EXCEPT&lt;/h1&gt;&lt;p&gt;에러가 발생해도 코드의 실행을 계속 하고 싶을 때 사용합니다.&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="TRY-EXCEPT"><a href="#TRY-EXCEPT" class="headerlink" title="TRY, EXCEPT"></a>TRY, EXCEPT</h1><p>에러가 발생해도 코드의 실행을 계속 하고 싶을 때 사용합니다.<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># try구문을 실행</span></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    print(ls[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 오류가 발생해도 코드의 실행을 마치고 e라는 변수에 오류 메세지를 담습니다.</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"error"</span>)</span><br><span class="line">    print(e)</span><br><span class="line">print(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"><span class="comment"># name 'ls' is not defined</span></span><br><span class="line"><span class="comment"># Done!</span></span><br></pre></td></tr></table></figure><h1 id="FINALLY"><a href="#FINALLY" class="headerlink" title="FINALLY"></a>FINALLY</h1><p>try, except 구문 실행된후 finally 구문이 실행됩니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"error"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"><span class="comment"># Done!</span></span><br></pre></td></tr></table></figure><blockquote><p>코딩 실행 중간에 에러가 발생하면 변수안에 계속 데이터를 가지고 있고, 이는 낭비입니다.<br>때문에 try던 except건 간에 어쨋든 “실행 되면 finally 변수안에 데이터 지워줘” 라고 할때 사용합니다.</p></blockquote><h1 id="RAISE"><a href="#RAISE" class="headerlink" title="RAISE"></a>RAISE</h1><p>강제로 에러를 발생시키는 명령입니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"error"</span>)</span><br><span class="line">    <span class="keyword">raise</span>(e)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"Done!"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>except때문에 코드 실행이 완료 되어야 하지만 raise()떄문에 강제로 에러가 발생됩니다.</p></blockquote><h1 id="에러-메세지-생성"><a href="#에러-메세지-생성" class="headerlink" title="에러 메세지 생성"></a>에러 메세지 생성</h1><p>“Number grater than 10”<br>10이상의 숫자가 입력되어야 한다는 에러 메세지를 만들어보면,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Exception 이라는 클래스를 상속 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lownumber</span><span class="params">(Exception)</span>:</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span> <span class="comment">#에러 메세지 오버라이팅</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Number grater than 10"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> Lownumber() <span class="comment">#Lownumber 클래스를 사용</span></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">input_number(<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">input_number(<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 에러메세지 출력</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#Lownumber                                 Traceback (most recent call last)</span></span><br><span class="line"><span class="comment">#&lt;ipython-input-19-8684a0e33c0b&gt; in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#----&gt; 1 input_number(8)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;ipython-input-17-bf4895dc7d57&gt; in input_number(num)</span></span><br><span class="line"><span class="comment">#      1 def input_number(num):</span></span><br><span class="line"><span class="comment">#      2     if num &lt;= 10:</span></span><br><span class="line"><span class="comment">#----&gt; 3         raise Lownumber() #Lownumber 클래스를 사용</span></span><br><span class="line"><span class="comment">#      4     print("10")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Lownumber: Number grater than 10</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/21/python-2020-02-21-try-except-finally-raise/#disqus_thread</comments>
    </item>
    
    <item>
      <title>모듈과 패키지</title>
      <link>https://howardhowonyu.github.io/2020/02/21/python-2020-02-21-python-module-package/</link>
      <guid>https://howardhowonyu.github.io/2020/02/21/python-2020-02-21-python-module-package/</guid>
      <pubDate>Fri, 21 Feb 2020 10:19:18 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Module-amp-Package&quot;&gt;&lt;a href=&quot;#Module-amp-Package&quot; class=&quot;headerlink&quot; title=&quot;Module &amp;amp; Package&quot;&gt;&lt;/a&gt;Module &amp;amp; Package&lt;/h1&gt;&lt;p&gt;모듈 : 변수, 함수, 클래스를 모아놓은 (.py)라는 이름의 확장자를 가진 파일입니다.&lt;br&gt;패키지 : 모듈의 기능을 디렉토리별로 정리해 놓은 개념입니다.&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Module-amp-Package"><a href="#Module-amp-Package" class="headerlink" title="Module &amp; Package"></a>Module &amp; Package</h1><p>모듈 : 변수, 함수, 클래스를 모아놓은 (.py)라는 이름의 확장자를 가진 파일입니다.<br>패키지 : 모듈의 기능을 디렉토리별로 정리해 놓은 개념입니다.<br><a id="more"></a></p><h2 id="Module-모듈"><a href="#Module-모듈" class="headerlink" title="Module(모듈)"></a>Module(모듈)</h2><p>모듈 생성</p><blockquote><p>매직 매서드를 사용한 모듈 생성<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dss.py라는 이름의 모듈 생성</span></span><br><span class="line">%%writefile dss.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모듈안에 함수 및 클래스를 생성</span></span><br><span class="line">num = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp1</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">"disp1"</span>,msg)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp2</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">"disp2"</span>,msg)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calc</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(self,*args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(args)</span><br></pre></td></tr></table></figure><br>모듈 호출<br><code>import &quot;모듈 이름&quot;</code>으로 호출</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dss </span><br><span class="line"></span><br><span class="line"><span class="comment"># 모듈 속 변수</span></span><br><span class="line">dss.num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모듈 속 함수</span></span><br><span class="line">dss.disp1(<span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 클래스로 객체 생성</span></span><br><span class="line">calc = dss.Calc()</span><br></pre></td></tr></table></figure><h2 id="Package-패키지"><a href="#Package-패키지" class="headerlink" title="Package(패키지)"></a>Package(패키지)</h2><p>패키지의 생성</p><ul><li>패키지 생성시 디렉토리에 <strong>init</strong>.py 파일을 추가해야 합니다.</li><li>단, python 3.3버전 이상에서는 필요 없습니다.</li><li>패키지의 위치 : 특정 디렉토리(pip,conda등으로 설치하는 등)에 있는 패키지는 어디에서나 import 가능합니다.</li></ul><p>주피터 노트북에서 패키지 설치</p><ul><li><code>school $ python setup.py</code> </li><li>커널 리스타트 해야 패키지가 적용됩니다.<blockquote><p>develop : 개발자모드, 코드를 수정하면 설치된 패키지도 같이 수정됩니다.<br>build : 일반모드, 코드로 수정하면 다시 설치해야 수정된 코드가 적용됩니다.</p></blockquote></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/21/python-2020-02-21-python-module-package/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTML 파싱을 이용한 크롤링</title>
      <link>https://howardhowonyu.github.io/2020/02/21/TIL-crawling-2020-02-21-crawling/</link>
      <guid>https://howardhowonyu.github.io/2020/02/21/TIL-crawling-2020-02-21-crawling/</guid>
      <pubDate>Fri, 21 Feb 2020 09:52:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;HTML-데이터-파싱을-이용한-크롤링&quot;&gt;&lt;a href=&quot;#HTML-데이터-파싱을-이용한-크롤링&quot; class=&quot;headerlink&quot; title=&quot;HTML 데이터 파싱을 이용한 크롤링&quot;&gt;&lt;/a&gt;HTML 데이터 파싱을 이용한 크롤링&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;웹페이지 분석 : URL 찾기&lt;/li&gt;
&lt;li&gt;요청 -&amp;gt; 응답 : HTML(str) 가져오기&lt;/li&gt;
&lt;li&gt;HTML(str) -&amp;gt; BeautifulSoup 객체에서 css-selector를 통해 내용을 가져옴 -&amp;gt; 데이터프레임으로 변환
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="HTML-데이터-파싱을-이용한-크롤링"><a href="#HTML-데이터-파싱을-이용한-크롤링" class="headerlink" title="HTML 데이터 파싱을 이용한 크롤링"></a>HTML 데이터 파싱을 이용한 크롤링</h2><ol><li>웹페이지 분석 : URL 찾기</li><li>요청 -&gt; 응답 : HTML(str) 가져오기</li><li>HTML(str) -&gt; BeautifulSoup 객체에서 css-selector를 통해 내용을 가져옴 -&gt; 데이터프레임으로 변환<a id="more"></a></li></ol><h2 id="크롤링-과정"><a href="#크롤링-과정" class="headerlink" title="크롤링 과정"></a>크롤링 과정</h2><ul><li>BeautifulSoup라는 클래스의 매서드 활용 response안에 있는 애들을 BeautifulSoup으로 HTML로 파싱</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># requests.get 매서드로 요철</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># response.content로 내용 선택, html.parser로 HTML로 파싱</span></span><br><span class="line">dom = BeautifulSoup(response.content, <span class="string">"html.parser"</span>)</span><br></pre></td></tr></table></figure><blockquote><h4 id="bs4-BeautifulSoupr"><a href="#bs4-BeautifulSoupr" class="headerlink" title="bs4.BeautifulSoupr"></a><code>bs4.BeautifulSoupr</code></h4><p>select 매서드 : 여러개의 element 객체를 리스트로 가져옴<br>select_one 매서드 : 하나의 element 객체를 가져옴</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 크롬 개발자 도구에서 copy selector했을때 id가 나올때 까지 찾아 복사함</span></span><br><span class="line"><span class="comment"># 리스트안의 딕셔너리 형태로 만들어줌&#123;"컬럼명":내용&#125;</span></span><br><span class="line">datas = []</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    datas.append(&#123;</span><br><span class="line">        <span class="string">"title"</span>: element.select_one(<span class="string">'.tit_g'</span>).text.strip().replace(<span class="string">"\n"</span>,<span class="string">""</span>), <span class="comment">#tit_g이름의 클래스 안에 텍스트를 잡음</span></span><br><span class="line">        <span class="string">"link"</span> : element.select_one(<span class="string">'a'</span>).get(<span class="string">"href"</span>), <span class="comment">#href속성의 값을 가져옴</span></span><br><span class="line">    &#125;)</span><br><span class="line">article_df = pd.DataFrame(datas)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/21/TIL-crawling-2020-02-21-crawling/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 전처리 기초 1</title>
      <link>https://howardhowonyu.github.io/2020/02/20/TIL-regression-analysis-2020-02-20-regression-analysis/</link>
      <guid>https://howardhowonyu.github.io/2020/02/20/TIL-regression-analysis-2020-02-20-regression-analysis/</guid>
      <pubDate>Thu, 20 Feb 2020 13:32:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;데이터-전처리에-사용하는-패키지&quot;&gt;&lt;a href=&quot;#데이터-전처리에-사용하는-패키지&quot; class=&quot;headerlink&quot; title=&quot;데이터 전처리에 사용하는 패키지&quot;&gt;&lt;/a&gt;데이터 전처리에 사용하는 패키지&lt;/h1&gt;&lt;h2 id=&quot;missi
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="데이터-전처리에-사용하는-패키지"><a href="#데이터-전처리에-사용하는-패키지" class="headerlink" title="데이터 전처리에 사용하는 패키지"></a>데이터 전처리에 사용하는 패키지</h1><h2 id="missingno"><a href="#missingno" class="headerlink" title="missingno"></a>missingno</h2><ul><li>결측데이터를 검색하여 시각화 함</li><li><code>.bar()</code>, <code>.matrix()</code>함수로 확인</li></ul><h2 id="scikit-learn-패키지의-SimpleImputer-클래스"><a href="#scikit-learn-패키지의-SimpleImputer-클래스" class="headerlink" title="scikit-learn 패키지의 SimpleImputer 클래스"></a>scikit-learn 패키지의 SimpleImputer 클래스</h2><ul><li><code>SimpleImputer</code>클래스로 객체를 생성할때, 결측값을 채우고자 할때, <code>strategy</code> 인수를 “mean”으로 하면 중앙값 “median”으로 하면 중앙값, <code>most_frequent</code>로 하면 최빈값을 대체값으로 사용한다.</li></ul><h2 id="patsy"><a href="#patsy" class="headerlink" title="patsy"></a>patsy</h2><ul><li>데이터를 선택, 변환, 추가, 스케일링 함</li><li><code>dmatrx()</code> 함수를 사용하면 데이터 프레임에 상수항을 추가하거나 원하는 데이터만 선택하거나 변형할 수 있다.</li><li>스케일링을 위한 함수 <ul><li><code>center()</code>: 평균을 0으로 스케일링</li><li><code>standardize()</code>: 평균을 0으로하고 표준편차를 1로 스케일링</li><li><code>scale()</code>: <code>standardize()</code> 과 같음</li></ul></li><li><code>design_info</code>라는 속성에 평균등 정보가 입력되어 있다.</li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/20/TIL-regression-analysis-2020-02-20-regression-analysis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Oauth, fake_useragent 활용</title>
      <link>https://howardhowonyu.github.io/2020/02/20/TIL-crawling-2020-02-20-Oauth/</link>
      <guid>https://howardhowonyu.github.io/2020/02/20/TIL-crawling-2020-02-20-Oauth/</guid>
      <pubDate>Thu, 20 Feb 2020 05:25:11 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Oauth&quot;&gt;&lt;a href=&quot;#Oauth&quot; class=&quot;headerlink&quot; title=&quot;Oauth&quot;&gt;&lt;/a&gt;Oauth&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;서비스(서드파티)에서 페이스북, 구글등의 서비스에 접근할수 있는 권한을 요청하고 이를 사용할수 있는 키를 발급해주는 입니다.
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Oauth"><a href="#Oauth" class="headerlink" title="Oauth"></a>Oauth</h2><ul><li>서비스(서드파티)에서 페이스북, 구글등의 서비스에 접근할수 있는 권한을 요청하고 이를 사용할수 있는 키를 발급해주는 입니다.<a id="more"></a></li></ul><blockquote><p>1단계: 서비스에서 페이스북, 구글등에 등록을 요청하면, request_token을 발급<br>2단계: 유저가 서비스에서 서드파티의 데이터를 가져오고자 하면, 서드파티에 oauth page를 띄움, 수락하면 이 유저에 대한 access_token을 발급<br>3단계: 서비스는 request_token과 access_token으로 서드파티에 데이터를 요청하고 받아옴</p></blockquote><h2 id="Oauth를-활용한-구글-스프레드시트-데이터-업로드-작업-순서"><a href="#Oauth를-활용한-구글-스프레드시트-데이터-업로드-작업-순서" class="headerlink" title="Oauth를 활용한 구글 스프레드시트 데이터 업로드 작업 순서"></a>Oauth를 활용한 구글 스프레드시트 데이터 업로드 작업 순서</h2><ol><li>oauth 인증 파일 생성</li><li>프로젝트 생성<ul><li>라이브러리 탭선택: Google Drive API, Google sheet API 사용설정</li><li>Oauth 동의화면<ul><li>어플리케이션 이름 설정</li><li>google api 범위 추가: drive, spreadsheets</li><li>저장</li></ul></li><li>사용자 인증정보<ul><li>Oauth클라이언트 ID 만들기</li></ul></li></ul></li><li>스프레드 시트에 크롤링한 데이터 저장 및 로드</li></ol><h2 id="fake-useragent"><a href="#fake-useragent" class="headerlink" title="fake_useragent"></a>fake_useragent</h2><ul><li>user_agent를 랜덤으로 생성하는 패키지</li><li>headers에 임의로 값을 지정해주고 requests해주는 방법으로 데이터 접근 가능</li><li>user-agent외에도 refere(접근 이전에 방문했던 페이지의 URL)등도 지정<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://finance.daum.net/api/exchanges/summaries"</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">"user-agent"</span> : UserAgent().chrome,</span><br><span class="line">    <span class="string">"referer"</span> : <span class="string">"https://finance.daum.net/exchanges"</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line">response</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/20/TIL-crawling-2020-02-20-Oauth/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 크롤링, 시각화, 정규화</title>
      <link>https://howardhowonyu.github.io/2020/02/20/TIL-crawling-2020-02-20-crawling/</link>
      <guid>https://howardhowonyu.github.io/2020/02/20/TIL-crawling-2020-02-20-crawling/</guid>
      <pubDate>Thu, 20 Feb 2020 05:16:02 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;web-crawling&quot;&gt;&lt;a href=&quot;#web-crawling&quot; class=&quot;headerlink&quot; title=&quot;web crawling&quot;&gt;&lt;/a&gt;web crawling&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;requests : json : 동적페이지(URL 변경 없이 데이터를 수정 및 추가)&lt;/li&gt;
&lt;li&gt;requests : html : 정적페이지(URL 변경 으로 데이터를 수정 및 추가)&lt;/li&gt;
&lt;li&gt;selenium : web browser : 1,2 번 방법을 사용하지 못할때 사용, 브라우저를 직접 조작
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="web-crawling"><a href="#web-crawling" class="headerlink" title="web crawling"></a>web crawling</h2><ol><li>requests : json : 동적페이지(URL 변경 없이 데이터를 수정 및 추가)</li><li>requests : html : 정적페이지(URL 변경 으로 데이터를 수정 및 추가)</li><li>selenium : web browser : 1,2 번 방법을 사용하지 못할때 사용, 브라우저를 직접 조작<a id="more"></a></li></ol><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><ul><li>문자열 데이터를 dict로 바꿔서 저장</li></ul><h2 id="크롤링-절차"><a href="#크롤링-절차" class="headerlink" title="크롤링 절차"></a>크롤링 절차</h2><ol><li>웹서비스 분석 : URL 분석하기, </li><li>request, response 하기 : json을 얻음</li><li>문자열 json 데이터를 dict로 파싱후 데이터 프레임으로 생성</li></ol><h2 id="requests-get-url-headers-params"><a href="#requests-get-url-headers-params" class="headerlink" title="requests.get(url,headers=params)"></a>requests.get(url,headers=params)</h2><ul><li>params라는 변수에 딕셔너리 형해로, user agent, cookie등을 임의로 설정을 해주는 방식으로 해결</li></ul><h2 id="정규화-Normalization"><a href="#정규화-Normalization" class="headerlink" title="정규화 : Normalization"></a>정규화 : Normalization</h2><ul><li><code>z = (x - min(x)) / (max(x) - min(x))</code></li><li>같은 기준을 놓고 비교하기 위한 절차</li></ul><h2 id="API로-날씨-정보-가져오기"><a href="#API로-날씨-정보-가져오기" class="headerlink" title="API로 날씨 정보 가져오기"></a>API로 날씨 정보 가져오기</h2><ul><li>darksky.net 서비스를 이용</li><li>restAPI : 키값을 감춰서 깔끔한 URL을 만들수 있다. </li></ul><h2 id="직방-데이터-크롤링"><a href="#직방-데이터-크롤링" class="headerlink" title="직방 데이터 크롤링"></a>직방 데이터 크롤링</h2><ul><li>동이름을 입력하여 아파트 메물을 데이터 프레임으로 만드는 작업</li><li><code>%%writefile</code> -&gt; 모듈화 하여 저장</li></ul><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><ul><li>각 도메인 별로 접근 권한 등의 규칙을 저장해 놓은 파일<blockquote><p>예) User-agent : *<br>   Allow : / </p></blockquote></li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/20/TIL-crawling-2020-02-20-crawling/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 분석</title>
      <link>https://howardhowonyu.github.io/2020/02/18/TIL-regression-analysis-2020-02-18-regression-analysis/</link>
      <guid>https://howardhowonyu.github.io/2020/02/18/TIL-regression-analysis-2020-02-18-regression-analysis/</guid>
      <pubDate>Tue, 18 Feb 2020 13:09:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;데이터-분석이란&quot;&gt;&lt;a href=&quot;#데이터-분석이란&quot; class=&quot;headerlink&quot; title=&quot;데이터 분석이란?&quot;&gt;&lt;/a&gt;데이터 분석이란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;데이터 간의 관계를 사용하여 우리가 원하는 새로운 출력데이터를 만들어
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="데이터-분석이란"><a href="#데이터-분석이란" class="headerlink" title="데이터 분석이란?"></a>데이터 분석이란?</h2><ul><li>데이터 간의 관계를 사용하여 우리가 원하는 새로운 출력데이터를 만들어 내는 과정</li></ul><h2 id="예측"><a href="#예측" class="headerlink" title="예측"></a>예측</h2><ul><li>여러가지 입력 데이터를 주면, 데이터 분석의 결과로 다른 데이터를 출력</li></ul><h2 id="입력데이터-input-data-출력데이터-output-data"><a href="#입력데이터-input-data-출력데이터-output-data" class="headerlink" title="입력데이터(input data), 출력데이터(output data)"></a>입력데이터(input data), 출력데이터(output data)</h2><ul><li>독립변수, 특징, 설명변수</li><li>종속변수, 라벨, 클라스(카테고리 값)</li></ul><h2 id="규칙기반과-학습기반"><a href="#규칙기반과-학습기반" class="headerlink" title="규칙기반과 학습기반"></a>규칙기반과 학습기반</h2><ul><li>규칙기반 방법은 사람이 규칙을 미리 만들어 놓는 방법</li><li>학습기반 방법은 규칙을 기계가 만들도록 하는 방법</li></ul><h2 id="지도학습"><a href="#지도학습" class="headerlink" title="지도학습"></a>지도학습</h2><ul><li>목표값이 있어야 학습가능하기 때문에, 입력데이터에 목표값을 붙여주는 작업이 필요하고 이를 레이블링이라 한다.</li><li>지도학습에서 가장 힘든 작업이 레이블링</li></ul><h2 id="인코딩"><a href="#인코딩" class="headerlink" title="인코딩"></a>인코딩</h2><ul><li>현실의 데이터를 컴퓨터가 처리할수 있는 데이터로 바꾸는것</li><li>이미지는 벡터화 시키고, 문서는 BOW방식을 사용<ul><li>BOW(Bag of words): 특정 단어가 몇번 나왔는지를 세어 빈도를 벡터로 표시하는 방법, 단어장을 만들어 각 단어별 번호를 메긴후 문서별로 번호를 셈</li></ul></li></ul><h2 id="입력차원"><a href="#입력차원" class="headerlink" title="입력차원"></a>입력차원</h2><ul><li>데이터를 입력받는 구멍, 한번 정하면 바꾸기 힘듦</li></ul><h2 id="카테고리값"><a href="#카테고리값" class="headerlink" title="카테고리값"></a>카테고리값</h2><ul><li>범주형 값이라고 하며, 비교가 불가능한 데이터</li></ul><h2 id="회기분석과-분류문제"><a href="#회기분석과-분류문제" class="headerlink" title="회기분석과 분류문제"></a>회기분석과 분류문제</h2><ul><li>회기분석은 답이 되는 숫자를 써야하는 단답형 문제를 푸는것</li><li>분류 문제는 4지 선다 문제 같이 답을 정하는 것</li></ul><h2 id="비지도-학습"><a href="#비지도-학습" class="headerlink" title="비지도 학습"></a>비지도 학습</h2><ul><li>지도학습을 제외한 모든 머신러닝 방식</li><li>클러스터링 : 비슷한 데이터를 같은 그룹으로 모으는것</li><li>imputation(impating): 빠진 그림을 채우는 등의 작업</li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/18/TIL-regression-analysis-2020-02-18-regression-analysis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>검정과 유의확률</title>
      <link>https://howardhowonyu.github.io/2020/02/17/TIL-mathematics-2020-02-17-math/</link>
      <guid>https://howardhowonyu.github.io/2020/02/17/TIL-mathematics-2020-02-17-math/</guid>
      <pubDate>Mon, 17 Feb 2020 13:32:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;검정&quot;&gt;&lt;a href=&quot;#검정&quot; class=&quot;headerlink&quot; title=&quot;검정&quot;&gt;&lt;/a&gt;검정&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;확률분포에 대한 어떤 주장: 가설&lt;/li&gt;
&lt;li&gt;검정: 가설을 증명하는 행위&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;귀
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="검정"><a href="#검정" class="headerlink" title="검정"></a>검정</h2><ul><li>확률분포에 대한 어떤 주장: 가설</li><li>검정: 가설을 증명하는 행위</li></ul><h2 id="귀무가설과-대립가설"><a href="#귀무가설과-대립가설" class="headerlink" title="귀무가설과 대립가설"></a>귀무가설과 대립가설</h2><ul><li>등식으로 표현(=)</li><li>귀무가설과 함께 고려하는 대립가설은, 진실임을 증명하고자 하는 가설</li></ul><h2 id="검정통계량"><a href="#검정통계량" class="headerlink" title="검정통계량"></a>검정통계량</h2><ul><li>표본데이터 집합을 입력으로 계산되는 함수의 값</li><li>베르누이분포 확률변수의 검정통계량은 이항분포를 따른다.</li><li>분산 시그마^2값을 알고있는 정규분포 확률변수는, 표본평균 m을 분산으로 정규화한 값을 정규통계량으로 쓰고, 이 검정통계량은 표준정규분포를 따른다.</li><li>분산 시그마^2값을 모르는 정규분포 확률변수는, 자유도가 N-1인 스튜던트 t분포를 따른다.</li></ul><h2 id="유의확률-P-value"><a href="#유의확률-P-value" class="headerlink" title="유의확률(P-value)"></a>유의확률(P-value)</h2><ul><li>확률분포와 확률분포의 표본값이 주어졌을때, 그 확률분포에서 해당 표본값 혹은 더 희귀한 값이 나올수 있는 확률</li><li>유의확률값이 작으면 귀무가설을 기각하고 대립가설을 채택할수 있다.</li></ul><h2 id="유의수준과-기각역"><a href="#유의수준과-기각역" class="headerlink" title="유의수준과 기각역"></a>유의수준과 기각역</h2><ul><li>유의확률값이 작으면 귀무가설을 기각하고 대립가설을 채택할수 있다, 에서 “작다”는 판단을 하는 기준.</li><li>기각역 : 유의수준에 대해 계산된 검정통계량</li></ul>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/17/TIL-mathematics-2020-02-17-math/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MySQL과 파이썬, SQLAlchemy</title>
      <link>https://howardhowonyu.github.io/2020/02/15/Database-2020-02-15-mysql-with-python/</link>
      <guid>https://howardhowonyu.github.io/2020/02/15/Database-2020-02-15-mysql-with-python/</guid>
      <pubDate>Sat, 15 Feb 2020 07:45:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;SQL-in-python&quot;&gt;&lt;a href=&quot;#SQL-in-python&quot; class=&quot;headerlink&quot; title=&quot;SQL in python&quot;&gt;&lt;/a&gt;SQL in python&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;데이터 베이스 연결&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="SQL-in-python"><a href="#SQL-in-python" class="headerlink" title="SQL in python"></a>SQL in python</h2><blockquote><p>데이터 베이스 연결<br><a id="more"></a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line">db = MySQLdb.connect(</span><br><span class="line">    <span class="string">"12.345.678.910"</span>, <span class="comment"># database server public ip</span></span><br><span class="line">    <span class="string">"root"</span>,          <span class="comment"># user</span></span><br><span class="line">    <span class="string">"test"</span>,           <span class="comment"># password</span></span><br><span class="line">    <span class="string">"world"</span>,         <span class="comment"># database name</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>쿼리 작성<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QUERY = <span class="string">"""</span></span><br><span class="line"><span class="string">    SHOW TABLES;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><br>쿼리 실행<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curs = db.cursor()</span><br><span class="line">curs.execute(QUERY)</span><br></pre></td></tr></table></figure></p><p>데이터 베이스의 테이블들의 이름을 출력<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rows = curs.fetchall()</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="판다스-데이터프레임으로-가져오기"><a href="#판다스-데이터프레임으로-가져오기" class="headerlink" title="판다스 데이터프레임으로 가져오기"></a>판다스 데이터프레임으로 가져오기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">QUERY = <span class="string">"""</span></span><br><span class="line"><span class="string">    SELECT *</span></span><br><span class="line"><span class="string">    FROM city_population_languages</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">df = pd.read_sql(QUERY,db)</span><br></pre></td></tr></table></figure><h2 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h2><p>python 에서 사용하는 ORM</p><h4 id="ORM-Object-Relational-Mapping"><a href="#ORM-Object-Relational-Mapping" class="headerlink" title="ORM : Object Relational Mapping"></a>ORM : Object Relational Mapping</h4><blockquote><p>데이터 베이스를 객체화 시켜서 데이터 베이스에 있는 데이터를 CRUD(create,read,update,delete)할수 있다.<br>쿼리 대신 함수 형태로 CRUD를 할수 있다.<br>사용하는 데이터 베이스를 변경하는 경우 엔진을 바꾸면 됨.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker <span class="comment">#sql에 연결 시켜주는 함수</span></span><br></pre></td></tr></table></figure><h3 id="데이터-베이스-연결-유저이름-비밀번호"><a href="#데이터-베이스-연결-유저이름-비밀번호" class="headerlink" title="데이터 베이스 연결 ://유저이름.비밀번호"></a>데이터 베이스 연결 ://유저이름.비밀번호</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engine = create_engine(<span class="string">"mysql://root:***@12.345.67.789/test"</span>)</span><br></pre></td></tr></table></figure><h3 id="테이블-객체-생성을-위한-클래스-작성"><a href="#테이블-객체-생성을-위한-클래스-작성" class="headerlink" title="테이블 객체 생성을 위한 클래스 작성"></a>테이블 객체 생성을 위한 클래스 작성</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    </span><br><span class="line">    __tablename__ = <span class="string">"user"</span> <span class="comment">#테이블 이름</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#컬럼 데이터 타입 작성</span></span><br><span class="line">    user_id = Column(Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">20</span>))</span><br><span class="line">    email = Column(String(<span class="number">30</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    rdate = Column(DateTime)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 생성자 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,email,age,rdate)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line">        self.age = age</span><br><span class="line">        self.rdate = rdate</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># repr 함수</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User &#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&gt;"</span>.format(</span><br><span class="line">            self.name, self.email, self.age, self.rdate)</span><br></pre></td></tr></table></figure><h3 id="데이터-베이스와-객체를-연결"><a href="#데이터-베이스와-객체를-연결" class="headerlink" title="데이터 베이스와 객체를 연결"></a>데이터 베이스와 객체를 연결</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># engine에 연결된 데이터 베이스(test)에 테이블 생성</span></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line"><span class="comment"># 데이터 베이스에 session 연결</span></span><br><span class="line">Session = sessionmaker(engine)</span><br><span class="line"><span class="comment"># 클래스를 return  받고</span></span><br><span class="line">session = Session()</span><br><span class="line"><span class="comment"># 객체 생성</span></span><br><span class="line"><span class="comment"># session은 데이터 베이스와 연결된 객체</span></span><br></pre></td></tr></table></figure><p>데이터 베이스 연결 -&gt; 테이블 객체 생성을 위한 클래스 작성 -&gt; 데이터 베이스와 객체를 연결후 사용</p><h3 id="1-Insert"><a href="#1-Insert" class="headerlink" title="1. Insert"></a>1. Insert</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert</span></span><br><span class="line">user = User(<span class="string">"howard"</span>,<span class="string">"howard@thisisemail.com"</span>,<span class="number">27</span>,<span class="string">"2016-03-21"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># session 객체에 데이터가 저장</span></span><br><span class="line">session.add(user)</span><br><span class="line"><span class="comment"># run tranaction : 이순간 데이터 베이스에 저장</span></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><blockquote><p>여러 동작을 한 tranction으로 묶어서 tranaction이 실행되는 동안은 다른 Task가 들어오지 못함.(예: 은행 계좌 출금 과정)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># insert 여러개</span></span><br><span class="line">users = [</span><br><span class="line">    User(<span class="string">"alice"</span>,<span class="string">"alice@gmail.com"</span>,<span class="number">25</span>,<span class="string">"2018-02-21"</span>),</span><br><span class="line">    User(<span class="string">"andy"</span>,<span class="string">"andy@daum.net"</span>,<span class="number">33</span>,<span class="string">"2015-10-21"</span>),</span><br><span class="line">]</span><br><span class="line">session.add_all(users) <span class="comment"># 데이터 저장</span></span><br><span class="line">session.commit() <span class="comment"># commit으로 데이터 베이스에 저장</span></span><br></pre></td></tr></table></figure><blockquote><p>rollback : session안에 있는 객체를 초기화<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.rollback()</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="2-Select"><a href="#2-Select" class="headerlink" title="2. Select"></a>2. Select</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select all</span></span><br><span class="line">results = session.query(User).all()</span><br></pre></td></tr></table></figure><blockquote><p>filter : ==, !=, &gt;, &lt;, &lt;=, &gt;=, like, in 다 쓸수 있음.<br>SQL WHERE 처럼 사용 가능<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">results = session.query(User).filter(User.name==<span class="string">"howard"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter : like</span></span><br><span class="line">results = session.query(User).filter(User.email.like(<span class="string">"%gmail%"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter : in_</span></span><br><span class="line">results = session.query(User).filter(User.name.in_([<span class="string">"alice"</span>,<span class="string">"andy"</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter : or_</span></span><br><span class="line">results = session.query(User).filter(or_(User.name == <span class="string">"howard"</span>, User.age == <span class="number">33</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># order by : desc, asc(내림차순, 오름차순 정렬)</span></span><br><span class="line">results = session.query(User).order_by(User.age.desc())</span><br><span class="line"></span><br><span class="line"><span class="comment"># count</span></span><br><span class="line">session.query(User).count()</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="3-Updata"><a href="#3-Updata" class="headerlink" title="3. Updata"></a>3. Updata</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data에 andy의 row데이터 가져와서</span></span><br><span class="line">data = session.query(User).filter(User.name == <span class="string">"howard"</span>).one()</span><br><span class="line"><span class="comment"># age라는 칸에 30 넣어주고</span></span><br><span class="line">data.age = <span class="number">30</span></span><br><span class="line"><span class="comment"># session에 담아서</span></span><br><span class="line">session.add(data)</span><br><span class="line"><span class="comment"># commit</span></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><h3 id="4-Delete"><a href="#4-Delete" class="headerlink" title="4. Delete"></a>4. Delete</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># delete row</span></span><br><span class="line">session.query(User).filter(User.name == <span class="string">'jin'</span>).delete()</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete table</span></span><br><span class="line"><span class="comment"># User클래스에서 지정된 테이블인 user만 지워짐</span></span><br><span class="line">User.__table__.drop(engine)</span><br></pre></td></tr></table></figure><h3 id="5-With-Pandas"><a href="#5-With-Pandas" class="headerlink" title="5. With Pandas"></a>5. With Pandas</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 데이터 프레임을 데이터 베이스에 넣기</span></span><br><span class="line">iris_df = sns.load_dataset(<span class="string">"iris"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iris_df 데이터를 iris라는 이름으로 </span></span><br><span class="line"><span class="comment"># engine에서 지정된 데이터 베이스로 보낸다. </span></span><br><span class="line"><span class="comment"># 만약 존재한다면 대체(replace)한다.</span></span><br><span class="line">iris_df.to_sql(name=<span class="string">"iris"</span>,con=engine,if_exists=<span class="string">"replace"</span>)</span><br></pre></td></tr></table></figure><h3 id="6-판다스로-데이터-불러오기"><a href="#6-판다스로-데이터-불러오기" class="headerlink" title="6.판다스로 데이터 불러오기"></a>6.판다스로 데이터 불러오기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># QUERY문 만들어서 판다스로 불러오기</span></span><br><span class="line">QUERY = <span class="string">"""</span></span><br><span class="line"><span class="string">    SELECT *</span></span><br><span class="line"><span class="string">    FROM iris</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">city_df = pd.read_sql(QUERY,engine)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/15/Database-2020-02-15-mysql-with-python/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MongDB</title>
      <link>https://howardhowonyu.github.io/2020/02/14/Database-2020-02-14-mongdb/</link>
      <guid>https://howardhowonyu.github.io/2020/02/14/Database-2020-02-14-mongdb/</guid>
      <pubDate>Fri, 14 Feb 2020 11:31:09 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;MongDB&quot;&gt;&lt;a href=&quot;#MongDB&quot; class=&quot;headerlink&quot; title=&quot;MongDB&quot;&gt;&lt;/a&gt;MongDB&lt;/h2&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="MongDB"><a href="#MongDB" class="headerlink" title="MongDB"></a>MongDB</h2><a id="more"></a><div class="table-container"><table><thead><tr><th><strong>RDBMS</strong></th><th><strong>NoSQL(Not Only SQL)</strong></th></tr></thead><tbody><tr><td>Database</td><td>Database</td></tr><tr><td>Table</td><td>Collection</td></tr><tr><td>Row / Record</td><td>Document</td></tr><tr><td>Column</td><td>Key / Filed</td></tr></tbody></table></div><h3 id="컬렉션-생성"><a href="#컬렉션-생성" class="headerlink" title="컬렉션 생성"></a>컬렉션 생성</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use dss</span><br><span class="line">db.createCollection(<span class="string">"user"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.createCollection(<span class="string">"user2"</span>,</span><br><span class="line">    &#123;<span class="attr">autoIndexId</span>:<span class="literal">true</span>, <span class="attr">capped</span>:<span class="literal">true</span>, <span class="attr">size</span>:<span class="number">50</span>, <span class="attr">max</span>:<span class="number">5</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 지우기</span><br><span class="line">db.user.drop()</span><br></pre></td></tr></table></figure><p>크기가 500바이트, document 최대 5개 까지, 5개가 되기전에 용량이 500바이트를 넘기면, 제일 과거의 데이터를 삭제하면서 들어감</p><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.user1.insert(&#123;<span class="string">"subject"</span>:<span class="string">"python"</span>,<span class="string">"level"</span>:<span class="number">3</span>&#125;)</span><br><span class="line">db.user1.insert(&#123;<span class="string">"subject"</span>:<span class="string">"web"</span>,<span class="string">"level"</span>:<span class="number">2</span>&#125;)</span><br><span class="line">db.user1.insert(&#123;<span class="string">"subject"</span>:<span class="string">"sql"</span>,<span class="string">"level"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>여러개 Insert<br>SQL 처럼 collection 생성하고 넣을 필요 없이. 이름 정해서 데이터 바로 넣으면 그냥 생성됨<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.info.insert([</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"python"</span>,<span class="string">"level"</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"web"</span>,<span class="string">"level"</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"sql"</span>,<span class="string">"level"</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"python"</span>,<span class="string">"level"</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"web"</span>,<span class="string">"level"</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"sql"</span>,<span class="string">"level"</span>:<span class="number">1</span>&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><br>제약조건이 있으면 remove 쓸수 없음<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.remove(&#123;<span class="attr">level</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="FIND-필터링"><a href="#FIND-필터링" class="headerlink" title="FIND (필터링)"></a>FIND (필터링)</h2><p>find(query, projection)<br>query : where 절<br>projection : select, 보여지는 filed<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="string">"subject"</span>:<span class="string">"python"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>lte : 작거나 같다<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="string">"level"</span>:  &#123;<span class="attr">$lte</span>:<span class="number">2</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>in : 선택<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="string">"subject"</span>: &#123;<span class="attr">$in</span>: [<span class="string">"java"</span>,<span class="string">"python"</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>논리연산자 : $or, $and, $not, $nor<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="attr">$and</span> : [&#123;<span class="string">"subject"</span>:<span class="string">"python"</span>&#125;,&#123;<span class="string">"level"</span>:&#123;<span class="attr">$gte</span>:<span class="number">3</span>&#125;&#125;]&#125;)</span><br><span class="line">db.info.find(&#123;<span class="attr">$nor</span> : [&#123;<span class="string">"subject"</span>:<span class="string">"python"</span>&#125;,&#123;<span class="string">"level"</span>:&#123;<span class="attr">$gte</span>:<span class="number">3</span>&#125;&#125;]&#125;)</span><br></pre></td></tr></table></figure></p><p>자바스크립트 문법<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="attr">$where</span>:<span class="string">"this.level == 1"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>projection : mysql에서 select 할때 column 지정<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;&#125;,&#123;<span class="string">"_id"</span>:<span class="literal">false</span>,<span class="string">"level"</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">db.info.find(&#123;&#125;,&#123;<span class="string">"subject"</span>:<span class="literal">true</span>,<span class="string">"level"</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">db.info.find(&#123;&#125;,&#123;<span class="string">"subject"</span>:<span class="literal">true</span>,<span class="string">"level"</span>:<span class="literal">true</span>,<span class="string">"_id"</span>:<span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>sort : 1(오름차순),-1(내림차순)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.info.find().sort(&#123;<span class="string">"level"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">db.info.find().sort(&#123;<span class="string">"level"</span>:<span class="number">-1</span>&#125;)</span><br><span class="line">db.info.find().sort(&#123;<span class="string">"level"</span>:<span class="number">-1</span>,<span class="string">"subject"</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>limit &amp; skip : limit는 아래로 몇개, skip은 몇개 뛰어넘고 그 다음 부터 시작<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- limit</span><br><span class="line">db.info.find().limit(<span class="number">3</span>)</span><br><span class="line">db.info.find().sort(&#123;<span class="string">"level"</span>:<span class="number">1</span>&#125;).limit(<span class="number">3</span>)</span><br><span class="line">-- skip </span><br><span class="line">db.info.find().skip(<span class="number">2</span>).limit(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.info.update(</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"html"</span>&#125;,<span class="comment">//query</span></span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"sass"</span>,<span class="string">"level"</span>:<span class="number">2</span>&#125;<span class="comment">//수정할내용</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>upsert : 데이터가 있으면 update, 없으면 insert<br>기본적으로 1개만 업데이트. multi:true 해줘야 여러개 업데이트<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.info.update(</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"less"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"subject"</span>:<span class="string">"less"</span>,<span class="string">"level"</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"upsert"</span>:<span class="literal">true</span>&#125; </span><br><span class="line">    -- subject에 less가 없는데 upsert: <span class="literal">true</span>이므로 &#123;<span class="string">"subject"</span>:<span class="string">"less"</span>,<span class="string">"level"</span>:<span class="number">2</span>&#125;로 데이터 입력했음</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="set-unset"><a href="#set-unset" class="headerlink" title="$set, $unset"></a>$set, $unset</h2><p>특정 데이터를 수정<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.info.update(</span><br><span class="line">    &#123;<span class="string">"level"</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"$set"</span>:&#123;<span class="string">"level"</span>:<span class="number">1</span>&#125;&#125;,</span><br><span class="line">    &#123;<span class="attr">multi</span>:<span class="literal">true</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>함수 사용가능<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showSkip = <span class="function"><span class="keyword">function</span>(<span class="params">start</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> db.info.find().skip(start<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showSkip(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/14/Database-2020-02-14-mongdb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mySQL quiz</title>
      <link>https://howardhowonyu.github.io/2020/02/14/TIL-Database-2020-02-14-mySQL/</link>
      <guid>https://howardhowonyu.github.io/2020/02/14/TIL-Database-2020-02-14-mySQL/</guid>
      <pubDate>Fri, 14 Feb 2020 10:59:14 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;world-sql-데이터로-푼-퀴즈&quot;&gt;&lt;a href=&quot;#world-sql-데이터로-푼-퀴즈&quot; class=&quot;headerlink&quot; title=&quot;world.sql 데이터로 푼 퀴즈&quot;&gt;&lt;/a&gt;world.sql 데이터로 푼 퀴즈&lt;/h1&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="world-sql-데이터로-푼-퀴즈"><a href="#world-sql-데이터로-푼-퀴즈" class="headerlink" title="world.sql 데이터로 푼 퀴즈"></a>world.sql 데이터로 푼 퀴즈</h1><a id="more"></a><h2 id="QUIZ"><a href="#QUIZ" class="headerlink" title="QUIZ"></a>QUIZ</h2><p>사용하는 언어가 3가지 이하인 국가중 도시인구가 300만 이상인 도시를 아래와 같이 조회하세요.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> country.code, city_population_languages.city_name, city_population_languages.population, country.name, city_population_languages.language_count, city_population_languages.languages</span><br><span class="line"><span class="keyword">from</span> country</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">city_population_languages</span><br><span class="line"><span class="keyword">on</span> country.code = city_population_languages.countrycode</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> city_population_languages.population <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><blockquote><p>VIEW를 이용한 분할관리<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> city_population_languages <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> city_population.name <span class="keyword">as</span> city_name, countrylanguage.countrycode,</span><br><span class="line"><span class="keyword">count</span>(countrylanguage.language) <span class="keyword">as</span> language_count, </span><br><span class="line"><span class="keyword">group_concat</span>(countrylanguage.language) <span class="keyword">as</span> languages, city_population.population</span><br><span class="line"><span class="keyword">from</span> countrylanguage</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">name</span>, population, countrycode</span><br><span class="line"><span class="keyword">from</span> city</span><br><span class="line"><span class="keyword">where</span> population &gt;= <span class="number">3000000</span>) <span class="keyword">as</span> city_population</span><br><span class="line"><span class="keyword">on</span> countrylanguage.countrycode = city_population.countrycode</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> countrylanguage.CountryCode, city_population.population, city_population.name </span><br><span class="line"><span class="keyword">having</span> language_count &lt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><p>group by 할때 ,로 여러개 동시에 group by 할수 있음<br>group by countrylanguage.CountryCode, city_population.population, city_population.name 처럼 여러개로 했었으면 더 빨리 풀수 있었음</p></blockquote><h2 id="QUIZ-1"><a href="#QUIZ-1" class="headerlink" title="QUIZ"></a>QUIZ</h2><p> ,로 구분해서 좌측부터 겹치는 부분만 걸러가면서 오른쪽으로 진행<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> category.name, <span class="keyword">sum</span>(payment.amount) <span class="keyword">as</span> total_amount</span><br><span class="line"><span class="keyword">from</span> payment, rental, inventory, film_category, <span class="keyword">category</span></span><br><span class="line"><span class="keyword">where</span> payment.rental_id = rental.rental_id</span><br><span class="line"><span class="keyword">and</span> rental.inventory_id = inventory.inventory_id</span><br><span class="line"><span class="keyword">and</span> inventory.film_id = film_category.film_id</span><br><span class="line"><span class="keyword">and</span> film_category.category_id = category.category_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> category.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total_amount <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://howardhowonyu.github.io/2020/02/14/TIL-Database-2020-02-14-mySQL/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
